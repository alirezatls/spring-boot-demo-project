/*
 * This file is generated by jOOQ.
 */
package com.demo.jooq.jooqdemo.db.tables;


import com.demo.jooq.jooqdemo.db.Indexes;
import com.demo.jooq.jooqdemo.db.Keys;
import com.demo.jooq.jooqdemo.db.Public;
import com.demo.jooq.jooqdemo.db.tables.records.HumanRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Human extends TableImpl<HumanRecord> {

    private static final long serialVersionUID = 956607054;

    /**
     * The reference instance of <code>public.human</code>
     */
    public static final Human HUMAN = new Human();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HumanRecord> getRecordType() {
        return HumanRecord.class;
    }

    /**
     * The column <code>public.human.id</code>.
     */
    public final TableField<HumanRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('human_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.human.name</code>.
     */
    public final TableField<HumanRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(225), this, "");

    /**
     * The column <code>public.human.family</code>.
     */
    public final TableField<HumanRecord, String> FAMILY = createField("family", org.jooq.impl.SQLDataType.VARCHAR(225), this, "");

    /**
     * Create a <code>public.human</code> table reference
     */
    public Human() {
        this(DSL.name("human"), null);
    }

    /**
     * Create an aliased <code>public.human</code> table reference
     */
    public Human(String alias) {
        this(DSL.name(alias), HUMAN);
    }

    /**
     * Create an aliased <code>public.human</code> table reference
     */
    public Human(Name alias) {
        this(alias, HUMAN);
    }

    private Human(Name alias, Table<HumanRecord> aliased) {
        this(alias, aliased, null);
    }

    private Human(Name alias, Table<HumanRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Human(Table<O> child, ForeignKey<O, HumanRecord> key) {
        super(child, key, HUMAN);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.HUMAN_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<HumanRecord, Integer> getIdentity() {
        return Keys.IDENTITY_HUMAN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<HumanRecord> getPrimaryKey() {
        return Keys.HUMAN_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<HumanRecord>> getKeys() {
        return Arrays.<UniqueKey<HumanRecord>>asList(Keys.HUMAN_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Human as(String alias) {
        return new Human(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Human as(Name alias) {
        return new Human(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Human rename(String name) {
        return new Human(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Human rename(Name name) {
        return new Human(name, null);
    }
}
